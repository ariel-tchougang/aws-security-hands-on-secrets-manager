Prerequisite: EC2 instance with enough permissions

01 - Create secret: 
aws secretsmanager create-secret \
    --name LabSecret04 \
    --description "Secret utilisé pour une démonstration AWS Secrets Manager" \
    --secret-string '{"username":"admin","password":"MySecurePassword123"}'

02 - Retrieve secret: aws secretsmanager get-secret-value --secret-id LabSecret04


03 - Update secret: 

aws secretsmanager put-secret-value \
    --secret-id LabSecret04 \
    --secret-string '{"username":"admin","password":"UpdatedPassword456"}'

04 - Retrieve secret updated value: aws secretsmanager get-secret-value --secret-id LabSecret04


05 - Create automatic Rotation

aws secretsmanager rotate-secret \
    --secret-id LabSecret04 \
    --rotation-rules AutomaticallyAfterDays=30 \
    --rotation-lambda-arn "arn:aws:lambda:us-east-1:937597476605:function:SecretsManagerDemoRotation"

06 - Retrieve secret updated value: aws secretsmanager get-secret-value --secret-id LabSecret04

07 - rotate: aws secretsmanager rotate-secret --secret-id LabSecret04



aws secretsmanager describe-secret --secret-id LabSecret04 




aws secretsmanager get-secret-value --secret-id dbadmin_secret

cat<<'EOF'>> get-secret.sh
getsecretvalue() {
  aws secretsmanager get-secret-value --secret-id $1 | \
    jq .SecretString | \
    jq fromjson
}

secret=`getsecretvalue $1`

user=$(echo $secret | jq -r .username)
password=$(echo $secret | jq -r .password)
endpoint=$(echo $secret | jq -r .host)
port=$(echo $secret | jq -r .port)

mysql \
-p$password \
-u $user \
-P $port \
-h $endpoint
EOF



